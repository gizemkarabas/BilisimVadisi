@page "/login"
@using Blazored.FluentValidation
@using MeetinRoomRezervation.Data
@using MeetinRoomRezervation.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JSRuntime

<div class="login-container" style="max-width: 400px; margin: 0 auto; padding: 24px;">
    <Card Title="Giriş Yap" Style="width: 100%;">
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <Alert Message="@ErrorMessage" Type="@AlertType.Error" ShowIcon="true" />
        }

        <Form Model="@LoginModel" OnFinish="HandleLogin" Layout="@FormLayout.Vertical">
            <FluentValidationValidator />
            <FormItem Label="E-posta">
                <Input @bind-Value="@LoginModel.Email" Placeholder="E-posta Adresinizi Giriniz" />
            </FormItem>
            
            <FormItem Label="Şifre">
                <InputPassword @bind-Value="@LoginModel.Password" Placeholder="Şifrenizi Giriniz" />
            </FormItem>
            
            <FormItem>
                <Button Type="@ButtonType.Primary" HtmlType="submit" Block>
                    Giriş Yap
                </Button>
            </FormItem>
            
            <Divider>
                <span>Hesabınız yok mu?</span>
            </Divider>
            
            <Button Type="@ButtonType.Link" OnClick="@(() => Navigation.NavigateTo("/register"))" Block>
                Kayıt Ol
            </Button>
        </Form>
    </Card>
</div>

@code {
    private LoginInputModel LoginModel = new();
    private bool IsLoading = false;
    private string ErrorMessage = "";

    private async Task HandleLogin()
    {
        IsLoading = true;
        ErrorMessage = "";

        try
        {
            var user = await AuthService.LoginAsync(LoginModel);

            if (user != null)
            {
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userId", user.Id);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userRole", user.Role.ToString());

                if (user.Role == UserRole.Admin)
                {
                    Navigation.NavigateTo("/admin/dashboard");
                }
                else
                {
                    Navigation.NavigateTo("/user/roomStatus");
                }
            }
            else
            {
                ErrorMessage = "Email veya şifre hatalı.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Giriş yapılırken bir hata oluştu.";
        }
        finally
        {
            IsLoading = false;
        }
    }


    public class LoginInputModel
    {
        public string Email { get; set; } 
        
        public string Password { get; set; } 
    }
}
