@page "/login"
@using Blazored.FluentValidation
@using MeetinRoomRezervation.Data
@using MeetinRoomRezervation.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JSRuntime

<div class="container" style="max-width: 70vw; margin: 0 auto; padding: 24px; margin-top:60px;">
	<div class="container-items">
		<Card>

			<div class="head-title">Giriş Yap</div>

			@if (!string.IsNullOrEmpty(ErrorMessage))
			{
				<Alert Message="@ErrorMessage" Type="@AlertType.Error" ShowIcon="true" />
			}

			<Form Model="@LoginModel" OnFinish="HandleLogin" Layout="@FormLayout.Vertical">
				<FormItem Label="E-posta">
					<Input @bind-Value="@LoginModel.Email" Placeholder="E-posta Adresinizi Giriniz" />
				</FormItem>

				<FormItem Label="Şifre">
					<InputPassword @bind-Value="@LoginModel.Password" Placeholder="Şifrenizi Giriniz" />
					<Button Type="@ButtonType.Link" Style="display: flex; justify-content: flex-end; color:crimson; font-size:12px" OnClick="@(() => Navigation.NavigateTo("/forgot-password"))" Block>
						Şifremi Unuttum
					</Button>
				</FormItem>



				<FormItem>
					<Button Type="@ButtonType.Primary"
							HtmlType="submit"
							Style="background-color: #515def;
                           color: #fff;
                           margin-top: 10px;
                           font-size: 10px;
                           font-weight: bold " Block>
						Giriş Yap
					</Button>
				</FormItem>

				<Divider>
					<span>Hesabınız yok mu?</span>
				</Divider>

				<Button Type="@ButtonType.Link"
						Style="color: #515def;"
						OnClick="@(() => Navigation.NavigateTo(" /register"))" Block>
					Kayıt Ol
				</Button>

			</Form>

		</Card>
	</div>
	<div class="image">
		<Image width={200}
			   src="/W-Home-Hand.png"
			   alt="Travelwise Logo"
			   Preview="false" />
	</div>
</div>

@code {
	private LoginInputModel LoginModel = new();
	private bool IsLoading = false;
	private string ErrorMessage = "";


	private async Task HandleLogin()
	{
		IsLoading = true;
		ErrorMessage = "";

		try
		{
			var user = await AuthService.LoginAsync(LoginModel);

			if (user != null)
			{
				if (AuthProvider is CustomAuthenticationStateProvider customProvider)
				{
					customProvider.MarkUserAsAuthenticated(user.Email, user.Role.ToString());
				}

				if (user.Role == UserRole.Admin)
				{

					Navigation.NavigateTo("/admin/dashboard");
				}
				else
				{
					Navigation.NavigateTo("/user/roomStatus");
				}
			}
			else
			{
				ErrorMessage = "Email veya şifre hatalı.";
			}
		}
		catch (Exception ex)
		{
			ErrorMessage = "Giriş yapılırken bir hata oluştu.";
		}
		finally
		{
			IsLoading = false;
		}

	}

	public class LoginInputModel
	{
		public string Email { get; set; }

		public string Password { get; set; }
	}
}
