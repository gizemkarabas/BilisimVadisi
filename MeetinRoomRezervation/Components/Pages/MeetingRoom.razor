@page "/user/roomStatus"
@using AntDesign
@using MeetinRoomRezervation.Models
@using MeetinRoomRezervation.Services.ReservationService
@inject IRoomService RoomService
@inject NavigationManager Navigation

<div class="reservation-panel">
	<PageTitle>Toplantı Odaları</PageTitle>

	<div class="reservation-panel-header">Lütfen Tarihi Seçin</div>
	<div>
		<DatePicker @bind-Value="SelectedDate"
					DisabledDate="DisablePastDates" />
	</div>


	<Row Gutter="16" Style="margin-top: 16px;">
		@if (Rooms.Count == 0)
		{
			<AntDesign.Col Span="24">
				<Alert Message="Bu tarihte gösterilecek oda bulunamadı." Type="@AlertType.Info" ShowIcon="true" />
			</AntDesign.Col>
		}
		else
		{
			@foreach (var room in Rooms)
			{
				<AntDesign.Col Span="6">
					<div @onclick="@(() => NavigateToReservation(room))">
						<Card Hoverable Style="margin-bottom: 16px; border-radius: 10px" Class="@(room.IsAvailable ? "available-room" : "unavailable-room")">
							<CardMeta Title="@room.Name" Description="@room.Location" />
							<div style="margin-top: 16px;">
								<p><Icon Type="user" /> Kapasite: @room.Capacity</p>
								<p><Icon Type="calendar" /> Doluluk: @room.OccupancyRate.ToString("F0")%</p>
								<Tag Color="@GetStatusColor(room.IsAvailable)">
									@(room.IsAvailable ? "Müsait" : "Dolu")
								</Tag>
							</div>
						</Card>
					</div>
				</AntDesign.Col>
			}
		}
	</Row>
</div>
<style>
	.unavailable-room {
		opacity: 0.7;
		cursor: not-allowed;
	}

	.available-room {
		cursor: pointer;
	}
</style>

@code {
	private List<MeetingRoomDto> Rooms = new();
	private DateTime _selectedDate = DateTime.Today;

	private DateTime SelectedDate
	{
		get => _selectedDate;
		set
		{
			_selectedDate = value;
			InvokeAsync(LoadRooms);
		}
	}

    protected override async Task OnInitializedAsync()
    {
        await LoadRooms();
    }
   
    private async Task LoadRooms()
    {
        try
        {
            Rooms.Clear();

            Rooms = await RoomService.GetAllRoomsWithOccupancyAsync(SelectedDate);

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoadRooms: {ex.Message}");
        }
    }
    
    private string GetStatusColor(bool available) => available ? "green" : "red";

    private void NavigateToReservation(MeetingRoomDto room)
    {
        if (!room.IsAvailable) return;

		var dateStr = SelectedDate.ToString("yyyy-MM-dd");
		Navigation.NavigateTo($"/user/reserve?roomId={room.Id}&date={dateStr}");
	}

	private bool DisablePastDates(DateTime date)
	{
		return date.Date < DateTime.Today;
	}
}
