@page "/user/reserve"
@using System.Security.Claims
@using MeetinRoomRezervation.Models
@using MeetinRoomRezervation.Services.ReservationService

@inject IReservationService ReservationService
@inject IRoomService RoomService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject ReservationDto Reservation

@if (isLoading)
{
    <div style="text-align: center; padding: 50px;">
        <Spin Size="SpinSize.Large" />
        <p>Yükleniyor...</p>
    </div>
}
else if (SelectedRoom is null)
{
    <Alert Message="Toplantı odası bulunamadı." Type="AlertType.Error" ShowIcon="true" />
    <Button Type="ButtonType.Primary" OnClick="@(() => Navigation.NavigateTo("/user/roomStatus"))">
        Oda Listesine Dön
    </Button>
}
else
{
        

    <div class="reservation-panel">
        <div class="reservation-panel-header">@($"Rezervasyon - {SelectedRoom.Name}")

        </div>
        <Form Model="this" OnFinish="GoToSummary">
            <FormItem>
                <div class="reservation-panel-header">Lütfen Tarihi Seçin</div>
                <DatePicker @bind-Value="SelectedDate"
                            DisabledDate="DisablePastDates"/>
            </FormItem>

            <div class="availability-panel">
                <div style="display: flex; gap: 20px; margin: 10px 0;">
                    <div style="display: flex; align-items: center;">
                        <div style="width: 12px; height: 12px; background-color: #1890ff; border-radius: 50%; margin-right: 8px;"></div>
                        <span>Müsait</span>
                    </div>
                    <div style="display: flex; align-items: center;">
                        <div style="width: 12px; height: 12px; background-color: #d9d9d9; border-radius: 50%; margin-right: 8px;"></div>
                        <span>Dolu</span>
                    </div>
                </div>
            </div>

            <h5>Çoklu Saat Seçebilirsiniz</h5>

            @if (Slots != null && Slots.Any())
            {
                <div class="slot-grid">
                    @foreach (var slot in Slots)
                    {
                        <Button Type="@GetButtonType(slot)"
                                Disabled="@(slot.IsReserved || slot.IsDisabled)"
                                OnClick="() => ToggleSlot(slot)">
                            @slot.StartTime.ToString("HH:mm") - @slot.EndTime.ToString("HH:mm")
                            @if (slot.IsReserved)
                            {
                                <span> (Rezerve)</span>
                            }
                        </Button>
                    }
                </div>
            }
            else
            {
                <Alert Message="Bu tarih için müsait slot bulunamadı." Type="AlertType.Info" ShowIcon="true" />
            }

            <div style="margin-top:10px;">
                <p><b>Toplam @(SelectedSlots?.Count ?? 0) Saatlik Seçim Yapıldı</b></p>
            </div>
            <div style="display:flex;justify-content: flex-end;">
                <Button Type="ButtonType.Primary"
                        OnClick="GoToSummary"
                        Disabled="@(SelectedSlots == null || !SelectedSlots.Any())"
                        Style="margin-top: 20px; width: 200px;display:flex;justify-content: center;background-color:#0095ff;color:white;">
                    Rezervasyon Oluştur
                </Button>
            </div>
        </Form>
    </div>
}

<style>
    .selected-slot {
        background-color: #1890ff;
        color: white;
    }
</style>

@code {
    private List<SlotDto> Slots = new();
    private List<SlotDto> SelectedSlots = new();
    private MeetingRoomDto? SelectedRoom;
    private bool isLoading = true;

    private DateTime _selectedDate = DateTime.Today;

    private DateTime SelectedDate
    {
        get => _selectedDate;
        set
        {
            if (_selectedDate != value)
            {
                _selectedDate = value;
                InvokeAsync(LoadSlots);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadInitialData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadInitialData()
    {
        try
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

            var roomId = query.Get("roomId");
            var dateStr = query.Get("date");

            if (!string.IsNullOrEmpty(roomId))
            {
                SelectedRoom = await RoomService.GetRoomByIdAsync(roomId);

                if (SelectedRoom == null)
                {
                    Console.WriteLine($"Room not found with ID: {roomId}");
                    return;
                }
            }
            else
            {
                Console.WriteLine("No roomId parameter found in URL");
                return;
            }

            if (!string.IsNullOrEmpty(dateStr) && DateTime.TryParse(dateStr, out var parsedDate))
            {
                SelectedDate = parsedDate;
            }
            else
            {
                SelectedDate = DateTime.Today;
            }

            await LoadSlots();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoadInitialData: {ex.Message}");
        }
    }

    private async Task LoadSlots()
    {
        try
        {
            if (SelectedRoom?.Id != null)
            {
                Slots.Clear();
                SelectedSlots.Clear();

                Slots = await RoomService.GetSlotsWithStatusAsync(SelectedRoom.Id, SelectedDate);

                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoadSlots: {ex.Message}");
            Slots = new List<SlotDto>();
        }
    }

    private void ToggleSlot(SlotDto slot)
    {
        if (slot.IsReserved || slot.IsDisabled) return;

        // Gece saatleri için uyarı (isteğe bağlı)
        if (slot.StartTime.Hour >= 0 && slot.StartTime.Hour < 6)
        {
            // Gece saati uyarısı gösterilebilir
            Console.WriteLine($"Gece saati seçildi: {slot.StartTime:HH:mm}");
        }

        if (SelectedSlots.Contains(slot))
            SelectedSlots.Remove(slot);
        else
            SelectedSlots.Add(slot);
    }


    private ButtonType GetButtonType(SlotDto slot)
    {
        if (slot == null) return ButtonType.Default;

        if (slot.IsReserved || slot.IsDisabled)
            return ButtonType.Default;

        if (SelectedSlots?.Contains(slot) == true)
            return ButtonType.Primary;

        return ButtonType.Default;
    }

    @code {
        private void GoToSummary()
        {
            try
            {
                Console.WriteLine($"GoToSummary called - SelectedSlots count: {SelectedSlots?.Count ?? 0}");
                Console.WriteLine($"Selected Date: {SelectedDate}");

                if (SelectedSlots == null || !SelectedSlots.Any())
                {
                    Console.WriteLine("No slots selected!");
                    return;
                }

                // Debug: Seçilen slotları logla
                foreach (var slot in SelectedSlots)
                {
                    Console.WriteLine($"Selected slot: {slot.StartTime:yyyy-MM-dd HH:mm} - {slot.EndTime:yyyy-MM-dd HH:mm}");
                }

                if (Reservation == null)
                {
                    Console.WriteLine("Reservation object is null");
                    return;
                }

                Reservation.SelectedSlots = new List<SlotDto>(SelectedSlots);
                Reservation.Location = SelectedRoom?.Location ?? "";
                Reservation.Room = new MeetingRoomDto
                {
                    Name = SelectedRoom?.Name ?? "",
                    Id = SelectedRoom?.Id ?? ""
                };
                Reservation.SelectedDate = SelectedDate; // Bu önemli!
                Reservation.RoomId = SelectedRoom?.Id ?? "";

                Console.WriteLine($"Reservation object - SelectedDate: {Reservation.SelectedDate}");
                Console.WriteLine($"Reservation object - SelectedSlots count: {Reservation.SelectedSlots?.Count ?? 0}");

                Navigation.NavigateTo("/user/reservation-summary");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in GoToSummary: {ex.Message}");
            }
        }
    }

    private bool DisablePastDates(DateTime date)
    {
        return date.Date < DateTime.Today;
    }
}
