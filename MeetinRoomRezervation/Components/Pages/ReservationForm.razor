@page "/user/reserve"
@using System.Security.Claims
@using MeetinRoomRezervation.Models
@using MeetinRoomRezervation.Services.ReservationService

@inject IReservationService ReservationService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject ReservationStateDto ReservationState


@if (SelectedRoom is null)
{
    <Alert Message="Toplantı odası bulunamadı." Type="AlertType.Error" ShowIcon="true"/>
}
else
{
    <Form Model="this" OnFinish="GoToSummary">
        <FormItem>
            <h4>Lütfen Tarihi Seçin</h4>
            <DatePicker @bind-Value="SelectedDate"
                        DisabledDate="DisablePastDates"/>
        </FormItem>
        <div class="availability-panel">
            <div style="display: flex">
                <div class="blue-circle"></div>
                <div style="margin-left: 4px; font-weight: bold;">
                    Müsait
                </div>
                <div class="gray-circle"></div>
                <div style="margin-left: 4px; font-weight: bold;">
                    Dolu
                </div>
            </div>
        </div>

        <div style="margin: 10px 0;">
            <AntDesign.Tag Color="@("blue")">Müsait</AntDesign.Tag>
            <AntDesign.Tag Color="@("gray")">Dolu</AntDesign.Tag>
        </div>

        <h5>Çoklu Saat Seçebilirsiniz</h5>

        <div class="slot-grid" style="display: flex; flex-wrap: wrap; gap: 10px;">
            @foreach (var slot in Slots)
            {
                <Button Type="@GetButtonType(slot)"
                        Disabled="@(slot.IsReserved || slot.IsDisabled)"
                        OnClick="() => ToggleSlot(slot)">
                    @slot.StartTime.ToString("HH:mm") - @slot.EndTime.ToString("HH:mm")
                    @if (slot.IsReserved)
                    {
                        <span> (Rezerve)</span>
                    }
                </Button>
            }
        </div>

        <div style="margin-top:10px;">
            <p><b>Toplam @SelectedSlots.Count Saatlik Seçim Yapıldı</b></p>
        </div>

        <FormItem>
            <Button Type="ButtonType.Primary"
                    OnClick="GoToSummary"
                    Disabled="@(!SelectedSlots.Any())"
                    Style="margin-top: 20px; width: 200px;">
                Devam Et
            </Button>
        </FormItem>
    </Form>
}

<style>
    .selected-slot {
        background-color: #1890ff;
        color: white;
    }
</style>

@code {
    private List<SlotDto> Slots = new();
    private List<SlotDto> SelectedSlots = new();
    private MeetingRoomDto SelectedRoom;

    private DateTime _selectedDate = DateTime.Today;

    private DateTime SelectedDate
    {
        get => _selectedDate;
        set
        {
            if (_selectedDate != value)
            {
                _selectedDate = value;
                InvokeAsync(LoadSlots);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        var roomId = query.Get("roomId");
        var dateStr = query.Get("date");

        if (!string.IsNullOrEmpty(roomId))
        {
            SelectedRoom = await ReservationService.GetRoomByIdAsync(roomId);
        }

        if (!string.IsNullOrEmpty(dateStr) && DateTime.TryParse(dateStr, out var parsedDate))
        {
            SelectedDate = parsedDate;
        }
        else
        {
            SelectedDate = DateTime.Today;
        }

        await LoadSlots();
    }

    private async Task LoadSlots()
    {
        try
        {
            if (SelectedRoom != null)
            {
                // Slotları temizle ve yeniden yükle
                Slots.Clear();
                SelectedSlots.Clear();

                Slots = await ReservationService.GetSlotsWithStatusAsync(SelectedRoom.Id!, SelectedDate);

                // UI'ı güncelle
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoadSlots: {ex.Message}");
        }
    }

    private void SelectSlot(SlotDto slot)
    {
        if (slot.IsReserved || slot.IsDisabled) return;

        slot.IsSelected = !slot.IsSelected;

        if (slot.IsSelected)
            SelectedSlots.Add(slot);
        else
            SelectedSlots.Remove(slot);
    }

    private void ToggleSlot(SlotDto slot)
    {
        if (slot.IsReserved || slot.IsDisabled) return;

        if (SelectedSlots.Contains(slot))
            SelectedSlots.Remove(slot);
        else
            SelectedSlots.Add(slot);
    }

    private ButtonType GetButtonType(SlotDto slot)
    {
        if (slot.IsReserved || slot.IsDisabled)
            return ButtonType.Default;

        if (SelectedSlots.Contains(slot))
            return ButtonType.Primary;

        return ButtonType.Default;
    }

    private void GoToSummary()
    {
        if (SelectedSlots == null || !SelectedSlots.Any())
        {
            // Kullanıcıya bir hata mesajı gösterilebilir
            return;
        }

        ReservationState.SelectedSlots = new List<SlotDto>(SelectedSlots); // Yeni bir liste oluştur
        ReservationState.Location = SelectedRoom?.Location ?? "";
        ReservationState.RoomName = SelectedRoom?.Name ?? "";
        ReservationState.SelectedDate = SelectedDate;
        ReservationState.RoomId = SelectedRoom?.Id ?? "";

        Navigation.NavigateTo("/user/reservation-summary");
    }

    private bool DisablePastDates(DateTime date)
    {
        return date.Date < DateTime.Today;
    }

}
