@page "/user/reserve"
@using MeetinRoomRezervation.Models
@using System.Security.Claims
@inject IReservationService ReservationService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject ReservationStateDto ReservationState

<PageHeader Title="Rezervasyon Oluştur" />

@if (SelectedRoom is null)
{
    <Alert Message="Toplantı odası bulunamadı." Type="AlertType.Error" ShowIcon="true" />
}
else
{
    <div>
        <h4>Lütfen Tarihi Seçin</h4>
        <DatePicker @bind-Value="SelectedDate" />
        <Button OnClick="RefreshSlots">Tarihi Uygula</Button>

        <div style="margin: 10px 0;">
            <AntDesign.Tag Color="@("blue")">Müsait</AntDesign.Tag>
            <AntDesign.Tag Color="@("gray")">Dolu</AntDesign.Tag>
        </div>

        <h5>Çoklu Seçim Yapabilirsiniz</h5>

        <div class="slot-grid">
            @foreach (var slot in Slots)
            {
                <Button Style="margin:5px; width:120px;"
                Type="@GetButtonType(slot)"
                Disabled="@slot.IsReserved"
                OnClick="() => ToggleSlot(slot)">
                    @($"{slot.StartTime:HH:mm} - {slot.EndTime:HH:mm}")
                </Button>
            }
        </div>

        <p style="margin-top:10px;">
            <b>Toplamda @SelectedSlots.Count Saatlik Seçim Yaptınız</b>
        </p>

        <div style="margin-top: 20px;">
            <Button Type="ButtonType.Primary" OnClick="GoToSummary" Disabled="@(!SelectedSlots.Any())">
                Devam Et
            </Button>
        </div>

    </div>
}

@code {
    private MeetingRoomDto? SelectedRoom;
    private DateTime SelectedDate = DateTime.Today;
    private List<SlotDto> Slots = new();
    private List<SlotDto> SelectedSlots = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSlots();
    }
    private async Task RefreshSlots()
    {
        await LoadSlots();
    }

    private async Task LoadSlots()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        var roomId = query.Get("roomId");
        var dateStr = query.Get("date");

        if (!string.IsNullOrEmpty(roomId))
            SelectedRoom = await ReservationService.GetRoomByIdAsync(roomId);

        if (!string.IsNullOrEmpty(dateStr) && DateTime.TryParse(dateStr, out var parsedDate))
            SelectedDate = parsedDate;

        if (SelectedRoom != null)
        {
            var availableTimeSlots = await ReservationService.GetAvailableTimeSlotsAsync(SelectedRoom.Id!, SelectedDate);
            Slots = availableTimeSlots.Select(timeSlot => new SlotDto
            {
                StartTime = SelectedDate.Date.Add(timeSlot),
                EndTime = SelectedDate.Date.Add(timeSlot).AddHours(1),
                IsReserved = false
            }).ToList();
        }
    }

    private async Task OnDateChange(DateTime date)
    {
        SelectedDate = date;
        await LoadSlots();
    }

    private void ToggleSlot(SlotDto slot)
    {
        if (SelectedSlots.Contains(slot))
            SelectedSlots.Remove(slot);
        else
            SelectedSlots.Add(slot);
    }

    private ButtonType GetButtonType(SlotDto slot)
    {
        if (slot.IsReserved)
            return ButtonType.Default;

        if (SelectedSlots.Contains(slot))
            return ButtonType.Primary;

        return ButtonType.Default;
    }

    private async Task SubmitReservation()
    {
        try
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // if (user?.Identity?.IsAuthenticated != true)
            // {
            //     // Kullanıcı oturum açmamış, giriş sayfasına yönlendir
            //     Navigation.NavigateTo("/Identity/Account/Login", true);
            //     return;
            // }

            // // Kullanıcı oturum açmış, devam et
            // var email = user.FindFirst(ClaimTypes.Email)?.Value ??
            //             user.Identity?.Name ??
            //             "unknown@example.com";

            foreach (var slot in SelectedSlots)
            {
                var reservationDto = new ReservationDto
                {
                    UserEmail = user.Identity?.Name ?? "",
                    RoomId = SelectedRoom!.Id!,
                    RoomName = SelectedRoom!.Name,
                    StartTime = slot.StartTime,
                    EndTime = slot.EndTime
                };

                await ReservationService.AddReservationAsync(reservationDto);
            }

            Navigation.NavigateTo("/user/myreservations", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SubmitReservation: {ex.Message}");
        }
    }
    private void GoToSummary()
    {
        ReservationState.SelectedSlots = SelectedSlots;
        ReservationState.Location = SelectedRoom?.Location ?? "";
        ReservationState.RoomName = SelectedRoom?.Name ?? "";
        ReservationState.SelectedDate = SelectedDate;
        ReservationState.RoomId = SelectedRoom?.Id ?? "";

        Navigation.NavigateTo("/user/reservation-summary");
    }

}
