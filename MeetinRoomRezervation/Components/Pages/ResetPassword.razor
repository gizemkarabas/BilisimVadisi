@page "/reset-password"
@inject IPasswordResetService PasswordResetService
@inject NavigationManager Navigation

<div class="reset-password-container" style="max-width: 400px; margin: 0 auto; padding: 24px;">
    <Card Title="Yeni Şifre Belirle" Style="width: 100%;">
        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <Alert Message="@SuccessMessage" Type="@AlertType.Success" ShowIcon="true" Style="margin-bottom: 16px;" />
        }

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <Alert Message="@ErrorMessage" Type="@AlertType.Error" ShowIcon="true" Style="margin-bottom: 16px;" />
        }

        @if (!isTokenValidated)
        {
            <div style="text-align: center;">
                <Spin Size="SpinSize.Large " />
                <p>Token doğrulanıyor...</p>
            </div>
        }
        else if (!isValidToken)
        {
            <div style="text-align: center;">
                <Icon Type="close-circle" Style="font-size: 48px; color: #ff4d4f; margin-bottom: 16px;" />
                <p>Geçersiz veya süresi dolmuş token.</p>
                <p>Lütfen şifre sıfırlama işlemini tekrar başlatınız.</p>
                <Button Type="@ButtonType.Primary" OnClick="@(() => Navigation.NavigateTo("/forgot-password"))">
                    Şifre Sıfırlama Sayfasına Git
                </Button>
            </div>
        }
        else if (isPasswordReset)
        {
            <div style="text-align: center;">
                <Icon Type="check-circle" Style="font-size: 48px; color: #52c41a; margin-bottom: 16px;" />
                <p>Şifreniz başarıyla sıfırlandı!</p>
                <p>Yeni şifrenizle giriş yapabilirsiniz.</p>
                <Button Type="@ButtonType.Primary" OnClick="@(() => Navigation.NavigateTo("/"))">
                    Giriş Sayfasına Git
                </Button>
            </div>
        }
        else
        {
            <Form Model="@ResetPasswordModel" OnFinish="HandleResetPassword" Layout="@FormLayout.Vertical">
                <FormItem Label="Yeni Şifre">
                    <InputPassword @bind-Value="@ResetPasswordModel.NewPassword" Placeholder="Yeni şifrenizi giriniz" />
                </FormItem>

                <FormItem Label="Yeni Şifre Tekrar">
                    <InputPassword @bind-Value="@ResetPasswordModel.ConfirmPassword" Placeholder="Yeni şifrenizi tekrar giriniz" />
                </FormItem>

                <FormItem>
                    <Button Type="@ButtonType.Primary" HtmlType="submit" Block Loading="@isLoading">
                        Şifreyi Sıfırla
                    </Button>
                </FormItem>

                <FormItem>
                    <Button Type="@ButtonType.Link" OnClick="@(() => Navigation.NavigateTo("/"))" Block>
                        Giriş Sayfasına Dön
                    </Button>
                </FormItem>
            </Form>
        }
    </Card>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Token { get; set; }

    private ResetPasswordInputModel ResetPasswordModel = new();
    private string ErrorMessage = "";
    private string SuccessMessage = "";
    private bool isLoading = false;
    private bool isTokenValidated = false;
    private bool isValidToken = false;
    private bool isPasswordReset = false;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Token))
        {
            ErrorMessage = "Geçersiz token.";
            isTokenValidated = true;
            return;
        }

        try
        {
            isValidToken = await PasswordResetService.ValidateResetTokenAsync(Token);
            isTokenValidated = true;

            if (!isValidToken)
            {
                ErrorMessage = "Geçersiz veya süresi dolmuş token.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Token doğrulanırken bir hata oluştu.";
            isTokenValidated = true;
            Console.Error.WriteLine($"Token validation error: {ex.Message}");
        }
    }

    private async Task HandleResetPassword()
    {
        ErrorMessage = "";
        SuccessMessage = "";

        if (string.IsNullOrWhiteSpace(ResetPasswordModel.NewPassword))
        {
            ErrorMessage = "Yeni şifre zorunludur.";
            return;
        }

        if (ResetPasswordModel.NewPassword.Length < 6)
        {
            ErrorMessage = "Şifre en az 6 karakter olmalıdır.";
            return;
        }

        if (ResetPasswordModel.NewPassword != ResetPasswordModel.ConfirmPassword)
        {
            ErrorMessage = "Şifreler eşleşmiyor.";
            return;
        }

        isLoading = true;

        try
        {
            var result = await PasswordResetService.ResetPasswordAsync(Token!, ResetPasswordModel.NewPassword);

            if (result)
            {
                isPasswordReset = true;
                SuccessMessage = "Şifreniz başarıyla sıfırlandı.";
            }
            else
            {
                ErrorMessage = "Şifre sıfırlanırken bir hata oluştu. Lütfen tekrar deneyiniz.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Bir hata oluştu. Lütfen tekrar deneyiniz.";
            Console.Error.WriteLine($"Reset password error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class ResetPasswordInputModel
    {
        public string NewPassword { get; set; } = "";
        public string ConfirmPassword { get; set; } = "";
    }
}
